import requests, time
from config import MIND_API_KEY
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# === –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ===
def process_document(document_path):
    """–ù–∞–¥—Å–∏–ª–∞—î –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ Mindee API –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏."""
    url = "https://api.mindee.net/v1/products/BOhdan2/passport_and_vehicle_document/v1/predict_async"
    headers = {"Authorization": f"Token {MIND_API_KEY}"}
    with open(document_path, "rb") as file:
        files = {"document": file}
        response = requests.post(url, headers=headers, files=files)
        return response.json() if response.status_code in [200, 202] else None

def check_processing_status(polling_url, headers):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ –ø–∞—É–∑–æ—é."""
    attempts = 0
    while attempts < 5:
        response = requests.get(polling_url, headers=headers)
        if response.status_code == 200:
            inference = response.json().get('document', {}).get('inference', {})
            if 'finished_at' in inference:
                return response.json()
        attempts += 1
        time.sleep(10)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏ 429 (Too Many Requests)
    return None

# === –û—Å–Ω–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–≤–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ===
async def extract_data_from_documents(update, context):
    passport_path = context.user_data.get('passport_path')
    vehicle_path = context.user_data.get('vehicle_path')

    all_data, error = {}, False

    # –û–±—Ä–æ–±–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
    if passport_path:
        res = process_document(passport_path)
        if res:
            poll_url = res['job']['polling_url']
            headers = {"Authorization": f"Token {MIND_API_KEY}"}
            stat = check_processing_status(poll_url, headers)
            if stat:
                pred = stat.get('document', {}).get('inference', {}).get('prediction', {})
                all_data['–ü–Ü–ë'] = pred.get('full_name', {}).get('value')
                all_data['–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞'] = pred.get('passport_number', {}).get('value')
            else:
                error = True
        else:
            error = True

    # –û–±—Ä–æ–±–∫–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞
    if vehicle_path:
        res = process_document(vehicle_path)
        if res:
            poll_url = res['job']['polling_url']
            headers = {"Authorization": f"Token {MIND_API_KEY}"}
            stat = check_processing_status(poll_url, headers)
            if stat:
                pred = stat.get('document', {}).get('inference', {}).get('prediction', {})
                all_data['–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ'] = pred.get('car_brand', {}).get('value')
                all_data['–ù–æ–º–µ—Ä –∞–≤—Ç–æ'] = pred.get('car_number', {}).get('value')
            else:
                error = True
        else:
            error = True

    if error:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —â–µ —Ä–∞–∑!"
        )
        context.user_data['state'] = 'waiting_passport'
        return

    extracted_data = {
        "–ü–Ü–ë": all_data.get("–ü–Ü–ë") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": all_data.get("–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ": all_data.get("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": all_data.get("–ù–æ–º–µ—Ä –∞–≤—Ç–æ") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
    }

    context.user_data['extracted_data'] = extracted_data

    text = "–Ø –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ üìÑ:\n\n"
    for k, v in extracted_data.items():
        text += f"{k}: {v}\n"
    text += "\n–í—Å–µ –≤—ñ—Ä–Ω–æ?"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_data"),
         InlineKeyboardButton("‚ùå –ù—ñ", callback_data="retry_data")]
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
