from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import os
from dotenv import load_dotenv
import datetime
import requests
import time

# === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
MIND_API_KEY = os.getenv("MIND_API_KEY")


def process_document(document_path):
    """–ù–∞–¥—Å–∏–ª–∞—î –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ Mindee API –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏."""
    url = "https://api.mindee.net/v1/products/bohdan-buryhin/passport_and_vehicle_document/v1/predict_async"
    headers = {
        "Authorization": f"Token {MIND_API_KEY}",
    }

    with open(document_path, "rb") as file:
        files = {"document": file}
        response = requests.post(url, headers=headers, files=files)

        if response.status_code in [200, 202]:
            return response.json()
        else:
            return None


def check_processing_status(polling_url, headers):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ –ø–∞—É–∑–æ—é –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏."""
    attempts = 0

    while attempts < 5:
        response = requests.get(polling_url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            inference = data.get('document', {}).get('inference', {})
            if 'finished_at' in inference:
                return data
        attempts += 1
        time.sleep(10)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏ 429 (Too Many Requests)

    return None

# === –°–¢–ê–†–¢ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è üöóüíº\n"
        "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ —Å–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞."
    )
    context.user_data['state'] = 'waiting_passport'


async def extract_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    passport_path = context.user_data.get('passport_path')
    vehicle_path = context.user_data.get('vehicle_path')

    all_data = {}
    error_occurred = False

    # –û–±—Ä–æ–±–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
    if passport_path:
        result_passport = process_document(passport_path)
        if result_passport:
            polling_url = result_passport['job']['polling_url']
            headers = {"Authorization": f"Token {MIND_API_KEY}"}
            status_data = check_processing_status(polling_url, headers)
            if status_data:
                prediction = status_data.get('document', {}).get('inference', {}).get('prediction', {})
                all_data['–ü–Ü–ë'] = prediction.get('full_name', {}).get('value')
                all_data['–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞'] = prediction.get('passport_number', {}).get('value')
            else:
                error_occurred = True
        else:
            error_occurred = True

    # –û–±—Ä–æ–±–∫–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞
    if vehicle_path:
        result_vehicle = process_document(vehicle_path)
        if result_vehicle:
            polling_url = result_vehicle['job']['polling_url']
            headers = {"Authorization": f"Token {MIND_API_KEY}"}
            status_data = check_processing_status(polling_url, headers)
            if status_data:
                prediction = status_data.get('document', {}).get('inference', {}).get('prediction', {})
                all_data['–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ'] = prediction.get('car_brand', {}).get('value')
                all_data['–ù–æ–º–µ—Ä –∞–≤—Ç–æ'] = prediction.get('car_number', {}).get('value')
            else:
                error_occurred = True
        else:
            error_occurred = True

    if error_occurred:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —â–µ —Ä–∞–∑!"
        )
        context.user_data['state'] = 'waiting_passport'
        return

    # –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ
    extracted_data = {
        "–ü–Ü–ë": all_data.get("–ü–Ü–ë") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": all_data.get("–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ": all_data.get("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": all_data.get("–ù–æ–º–µ—Ä –∞–≤—Ç–æ") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
    }

    context.user_data['extracted_data'] = extracted_data

    text = "–Ø –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ üìÑ:\n\n"
    for k, v in extracted_data.items():
        text += f"{k}: {v}\n"
    text += "\n–í—Å–µ –≤—ñ—Ä–Ω–æ?"

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_data"),
            InlineKeyboardButton("‚ùå –ù—ñ, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data="retry_data")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(text, reply_markup=reply_markup)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = context.user_data.get('state')

    photo = update.message.photo[-1]
    file = await photo.get_file()

    os.makedirs(f"photos/{user_id}", exist_ok=True)

    if state == 'waiting_passport':
        passport_path = f"photos/{user_id}/passport.jpg"
        await file.download_to_drive(passport_path)
        context.user_data['passport_path'] = passport_path

        await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ üöò")
        context.user_data['state'] = 'waiting_vehicle_doc'

    elif state == 'waiting_vehicle_doc':
        vehicle_path = f"photos/{user_id}/vehicle.jpg"
        await file.download_to_drive(vehicle_path)
        context.user_data['vehicle_path'] = vehicle_path

        await update.message.reply_text("–û—Ç—Ä–∏–º–∞–≤ –æ–±–∏–¥–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏! üîç –û–±—Ä–æ–±–ª—è—é –¥–∞–Ω—ñ...")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–±—Ä–æ–±–∫–∏ –æ–±–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        await extract_data(update, context)

    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start")


# === –û–ë–†–û–ë–ö–ê –ù–ï –§–û–¢–û ===
async def handle_non_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç *—è–∫ —Ñ–æ—Ç–æ*, –∞ –Ω–µ —è–∫ —Ñ–∞–π–ª, —Ç–µ–∫—Å—Ç —á–∏ —â–æ—Å—å —ñ–Ω—à–µ.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π üìé —ñ –≤–∏–±–µ—Ä–∏ *–ì–∞–ª–µ—Ä–µ—è* –∞–±–æ *–ö–∞–º–µ—Ä–∞*.",
        parse_mode="Markdown"
    )


# === –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ü–û–õ–Ü–°–£ ===
async def generate_policy(extracted_data):
    current_date = datetime.datetime.now().strftime("%d.%m.%Y")
    return (
        f"üîí *–°—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å ‚ÑñCAR-{extracted_data['–ù–æ–º–µ—Ä –∞–≤—Ç–æ'].replace(' ', '')}*\n\n"
        f"üë§ *–ü–Ü–ë:* {extracted_data['–ü–Ü–ë']}\n"
        f"ü™™ *–ü–∞—Å–ø–æ—Ä—Ç:* {extracted_data['–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞']}\n"
        f"üöó *–ê–≤—Ç–æ–º–æ–±—ñ–ª—å:* {extracted_data['–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ']} ({extracted_data['–ù–æ–º–µ—Ä –∞–≤—Ç–æ']})\n"
        f"üíµ *–°—É–º–∞ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:* 100 USD\n"
        f"üìÖ *–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è:* {current_date}\n\n"
        "‚úÖ –ü–æ–ª—ñ—Å –¥—ñ–π—Å–Ω–∏–π —ñ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –≤–∞–º –Ω–∞ email –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏.\n"
        "_(–¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –≤–µ—Ä—Å—ñ—è –ø–æ–ª—ñ—Å—É, –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –±–µ–∑ OpenAI)_"
    )


# === CALLBACK –û–ë–†–û–ë–ö–ê ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "confirm_data":
        await query.edit_message_text("–î—è–∫—É—é –∑–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚úÖ")
        context.user_data['state'] = 'price_offer'

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ó–≥–æ–¥–µ–Ω", callback_data="agree_price"),
                InlineKeyboardButton("‚ùå –ù–µ –∑–≥–æ–¥–µ–Ω", callback_data="decline_price")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î *100 USD* üíµ\n–ü–æ–≥–æ–¥–∂—É—î—à—Å—è –∑ —Ü—ñ—î—é —Ü—ñ–Ω–æ—é?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    elif data == "retry_data":
        context.user_data['state'] = 'waiting_passport'
        await query.edit_message_text("–û–∫–µ–π, –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —â–µ —Ä–∞–∑ üì∑")

    elif data == "agree_price":
        await query.edit_message_text("–ß—É–¥–æ–≤–æ! –ì–µ–Ω–µ—Ä—É—é —Ç–≤—ñ–π —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å... üìÑ")
        context.user_data['state'] = 'policy_generated'

        extracted_data = context.user_data.get('extracted_data')
        policy_text = await generate_policy(extracted_data)

        await query.message.reply_text(policy_text, parse_mode="Markdown")

    elif data == "decline_price":
        await query.edit_message_text(
            "–ù–∞ –∂–∞–ª—å, —Ü—ñ–Ω–∞ *100 USD* —î —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é —ñ –Ω–µ –ø—ñ–¥–ª—è–≥–∞—î –∑–º—ñ–Ω—ñ üòî",
            parse_mode="Markdown"
        )


# === MAIN ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(~filters.PHOTO & filters.ALL, handle_non_photo))
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()


if __name__ == "__main__":
    main()
